(function() {
  var anotherObj, log, myObj, nodeBase, someClass, util;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }, __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  };
  nodeBase = require(__dirname + '/../index');
  util = require(process.binding('natives').util ? 'util' : 'sys');
  log = function() {
    return someClass.log.apply(someClass, arguments);
  };
  someClass = (function() {
    __extends(someClass, nodeBase);
    someClass.defaults = {
      logging: true,
      logLevel: 'ALL',
      addToCollection: true
    };
    nodeBase.static(someClass);
    function someClass(opts) {
      this.someMember = __bind(this.someMember, this);      this.defaults = {
        put: 'someDefaultsHere'
      };
      someClass.__super__.constructor.apply(this, arguments);
      this.on('error', function(err) {
        return this.warn('emitted and catched error ' + JSON.stringify(err, null, " "));
      });
      this.error('awesome!!!');
    }
    someClass.prototype.someMember = function() {
      this.log('hello there');
      return this.warn('hello there');
    };
    return someClass;
  })();
  myObj = new someClass({
    logging: true,
    logLevel: 'WARN',
    some: 'opts'
  });
  myObj.someMember();
  anotherObj = new someClass({
    logging: true
  });
  if (someClass.options.addToCollection) {
    console.log('cache ' + util.inspect(someClass.Cache()));
  }
  debugger;
  log('Number of Objects created ' + someClass.getTotalIds());
}).call(this);
