(function() {
  var CappedObject;
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  };
  CappedObject = (function() {
    __extends(CappedObject, require('events').EventEmitter);
    function CappedObject(max, baseClass) {
      if (!(baseClass || typeof baseClass === 'function')) {
        throw Error("[CappedObject] " + baseClass + " is not a function. Must be a constructor function!");
      }
      this.max = max;
      this.name = baseClass.name;
      this.base = baseClass;
      this.dropped = false;
      this.Collection = {};
      this._byFIFO = [];
      this._getLast = function() {
        return this._byFIFO.pop();
      };
      this.removeCount = 0;
    }
    CappedObject.prototype.remove = function(obj) {
      if (this.Collection[obj._id]) {
        ++this.removeCount;
        delete this.Collection[obj._id];
        return this.base.emit('remove', obj);
      }
    };
    CappedObject.prototype.addId = function(obj) {
      var pop;
      if (this.Collection[obj._id]) {
        return this.base.warn("[CappedObject.addId] Object already in collection returning");
      }
      this._byFIFO.unshift(obj);
      this.Collection[obj._id] = obj;
      this.base.emit('add', obj);
      if (this.max && this._byFIFO.length - this.removeCount > this.max) {
        while (true) {
          pop = this._getLast();
          if (this.Collection[pop._id]) {
            break;
          } else {
            --this.removeCount;
          }
        }
        delete this.Collection[pop._id];
        this.base.emit('remove', pop);
        this.base.emit('drop', pop);
        this.base.warn("[CappedObject] CAP LIMIT REACHED! Dropping object " + pop._id + " of collection " + this.name);
        return this.base.dropped = true;
      }
    };
    CappedObject.prototype.getId = function(id) {
      if (!this.Collection[id] && this.dropped) {
        global[name].error("[CappedObject] the object " + id + " was not found in the collection, this might be due to dropped elements!");
      }
      return this.Collection[id];
    };
    CappedObject.prototype.getNumberOfObjects = function() {
      return this._byFIFO.length - this.removeCount;
    };
    CappedObject.prototype.getObjectIds = function() {
      var key, _results;
      _results = [];
      for (key in this.Collection) {
        _results.push(key);
      }
      return _results;
    };
    return CappedObject;
  })();
  module.exports = CappedObject;
}).call(this);
