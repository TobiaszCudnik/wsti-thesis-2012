#props = require './props'

Property = exports.Property
AsyncProperty = exports.AsyncProperty
Signal = exports.Signal
PropertiesObject = exports.PropertiesObject
SignalsObject = exports.SignalsObject

#expect = require 'expect'
#require 'should'
#_ = require 'underscore'
property = -> new Property arguments[0], arguments[1], arguments[2]
async_property = -> new AsyncProperty arguments[0], arguments[1], arguments[2]
signal = -> new Signal arguments[0], arguments[1], arguments[2]

describe 'Properties', ->
	obj = klass = null

	describe 'basics', ->
		beforeEach ->
			class klass
				property 'foo', @, 'bar'
				#				@property 'foo', 'bar'

				constructor: ->
			obj = new klass

		it 'should work like getter', ->
		#        expect( obj.foo() ).to.eql 'bar'
			expect(obj.foo()).to.eql 'bar'

		it 'should work like a setter', ->
			obj.foo 'baz'
			expect(obj.foo()).to.eql 'baz'

	describe 'mixin basics', ->
		beforeEach ->
			class klass extends PropertiesObject
				@property 'foo', 'bar'

				constructor: ->

			obj = new klass

		it 'should work like getter', ->
		#        expect( obj.foo() ).to.eql 'bar'
			expect(obj.foo()).to.eql 'bar'

		it 'should work like a setter', ->
			obj.foo 'baz'
			expect(obj.foo()).to.eql 'baz'

	describe 'custom funcs', ->
		beforeEach ->
			class klass
				property 'foo', @,
					set: (set, val) ->
						set val.replace /a/, 'b'

				property 'bar', @,
					init: (set) -> set 'bar'
					get: (get) -> return get().replace /a/, 'b'

				property 'baz', @,
					init: (set) -> set null
					get: (get) -> return get().replace /z/, 'b'
					set: (set, val) ->
						set val.replace /a/, 'b'

				constructor: ->
			obj = new klass

		it 'should support custom setter', ->
			obj.foo 'baz'
			expect(obj.foo()).to.eql 'bbz'

		it 'should support custom getter', ->
			expect(obj.bar()).to.eql 'bbr'

		it 'should support custom getter and setter', ->
			obj.baz 'baz'
			expect(obj.baz()).to.eql 'bbb'

describe 'Signals', ->
	obj = klass = null

	describe 'basics', ->
		scope = {}
		beforeEach ->
			class klass

				signal 'foo', @

				signal 'bar', @,
					set: (next, ret) -> next ++ret

				signal 'baz', @,
					init: (next) -> scope.foo = yes

				on: ->
				emit: ->
				constructor: ->

			obj = new klass
			# mock
			sinon.stub obj
			obj.foo.restore()
			obj.bar.restore()
			obj.baz.restore()

		it 'should define signal', ->
			throw new Error 'not implemented'

		it 'should init signals', ->
			throw new Error 'not implemented'

		it 'should emit events', ->
			obj.foo 'param1', ->
			expect(obj.emit.calledWith 'foo', 'param1').to.be.ok()

		it 'should bind to events', ->
			obj.foo().on ->
			expect(obj.on.calledWith 'foo').to.be.ok()

		it 'should emit params', ->
			throw new Error 'not implemented'

		it 'should support initial listener', ->
			throw new Error 'not implemented'

		describe 'aop', ->
			it 'should allow to bind to a before event', ->
				throw new Error 'not implemented'
			it 'should allow to bind to an after event', ->
				throw new Error 'not implemented'

	describe 'mixin basics', ->
		beforeEach ->
			class klass extends SignalsObject
				@signal 'foo'

				on: ->
				emit: ->
				constructor: ->
			obj = new klass

		it 'should auto init signals', ->
			obj.initSignals()
			throw new Error 'not implemented'

		# COPY - PASTE FROM basics

		it 'should emit events', ->
			sinon.stub obj, 'emit'

			obj.foo 'param1', ->
			#            debugger
			expect(obj.emit.calledWith 'foo', 'param1').to.be.ok()

		it 'should bind to events', ->
			sinon.stub obj, 'on'
			sinon.stub obj, 'emit'

			obj.foo().on ->
			#            debugger
			expect(obj.on.calledWith 'foo').to.be.ok()

		# END OF COPY - PASTE FROM basics

#describe 'AsyncProperties', ->
#	obj = klass = null
#
#	describe 'basics', ->
#		beforeEach ->
#			class klass
#				property 'foo', @,
#					init: -> 'bar'
#					set: (set, val, next) ->
#						setTimeout ->
#							set val
#							do next
#
#				constructor: ->
#			obj = new klass
#
#		it 'should work like a getter', ->
#	#        expect( obj.foo() ).to.eql 'bar'
#			debugger
#			obj.foo().should.eql 'bar'
#
#		it 'should work like setter', ->
#			obj.foo 'baz'
#			obj.foo().should.eql 'baz'
