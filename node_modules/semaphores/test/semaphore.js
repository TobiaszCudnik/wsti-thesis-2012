(function() {
  var Mutex, Semaphore, log, semaphore, _ref;

  semaphore = require('../semaphore');

  _ref = [semaphore.Semaphore, semaphore.Mutex], Semaphore = _ref[0], Mutex = _ref[1];

  require('should');

  log = console.log;

  describe('Semaphore', function() {
    it('should sync instructions', function(next) {
      var a, a1, a1_flag, b, b1, b1_flag, sem;
      a1_flag = false;
      b1_flag = false;
      a1 = function() {
        return a1_flag = true;
      };
      b1 = function() {
        a1_flag.should.be.ok;
        return b1_flag = true;
      };
      sem = new Semaphore;
      a = function() {
        a1();
        return sem.signal(next);
      };
      b = function() {
        return sem.wait(function(next2) {
          b1();
          return next2();
        });
      };
      b();
      return a();
    });
    return it('should handle mutual exclusion', function(next) {
      var a, b, count, mutex;
      mutex = new Mutex;
      count = 0;
      a = function() {
        return mutex.wait(function() {
          count++;
          return process.nextTick(function() {
            count.should.equal(1);
            return mutex.signal();
          });
        });
      };
      b = function() {
        return mutex.wait(function() {
          count++;
          return mutex.signal();
        });
      };
      a();
      return b();
    });
  });

}).call(this);
