
/**
 * Module dependencies.
 */

var Base = require('./base')
  , color = Base.color;
<<<<<<< HEAD
=======
var fs = require('fs');
>>>>>>> Misc.

/**
 * Expose `Spec`.
 */

exports = module.exports = Spec;

/**
 * Initialize a new `Spec` test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

<<<<<<< HEAD
function Spec(runner) {
=======
_ = require('underscore')

console.log = _.wrap(console.log, function(func) {
	func.apply(console, arguments)
}


function Spec(runner) {
  runner.on('end', close_file);
>>>>>>> Misc.
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , indents = 0
    , n = 0;

<<<<<<< HEAD
=======

	function close_file = function() {
		fs.writeFile('message.txt', 'Hello Node', function (err) {
	  if (err) throw err;
	  console.log('It\'s saved!');
	});
	})

>>>>>>> Misc.
  function indent() {
    return Array(indents).join('  ')
  }

<<<<<<< HEAD
  runner.on('start', function(){
    console.log();
=======
	var stream;

  runner.on('start', function(){
    console.log();
		stream = fs.createWriteStream("my_file.txt");
>>>>>>> Misc.
  });

  runner.on('suite', function(suite){
    ++indents;
    console.log(color('suite', '%s%s'), indent(), suite.title);
  });

  runner.on('suite end', function(suite){
    --indents;
    if (1 == indents) console.log();
  });

  runner.on('test', function(test){
    process.stdout.write(indent() + color('pass', '  ◦ ' + test.title + ': '));
  });

  runner.on('pending', function(test){
    var fmt = indent() + color('pending', '  - %s');
    console.log(fmt, test.title);
  });

  runner.on('pass', function(test){
    if ('fast' == test.speed) {
      var fmt = indent()
        + color('checkmark', '  ✓')
        + color('pass', ' %s ');
      console.log('\r' + fmt, test.title);
    } else {
      var fmt = indent()
        + color('checkmark', '  ✓')
        + color('pass', ' %s ')
        + color(test.speed, '(%dms)');
      console.log('\r' + fmt, test.title, test.duration);
    }
  });

  runner.on('fail', function(test, err){
<<<<<<< HEAD
    console.log('\r' + indent() + color('fail', '  %d) %s'), n++, test.title);
=======
//     console.log('\r' + indent() + color('fail', '  %d) %s'), n++, test.title);
>>>>>>> Misc.
  });

  runner.on('end', self.epilogue.bind(self));
}

/**
 * Inherit from `Base.prototype`.
 */

<<<<<<< HEAD
Spec.prototype.__proto__ = Base.prototype;
=======
Spec.prototype.__proto__ = Base.prototype;

stream.once('open', function(fd) {
  stream.write("My first row\n");
  stream.write("My second row\n");
});
>>>>>>> Misc.
