var simpleEvents = require('nodeunit').testCase;

var file = '../../lib/eventemitter2';
var l = console.log

module.exports = simpleEvents({

  setUp: function (callback) {
    var EventEmitter2;

    if(typeof require !== 'undefined') {
      EventEmitter2 = require(file).EventEmitter2;
    }
    else {
      EventEmitter2 = window.EventEmitter2;
    }

    this.emitter = new EventEmitter2({ verbose: true });
    callback();
  },

//  tearDown: function (callback) {
//    //clean up?
//    callback && callback();
//  },

  'it should call the callback when all handlers called': function (test) {
	  test.expect(2)

    var emitter = this.emitter,
	    check_listener_1 = false,
	    check_listener_2 = false

    emitter.on('event1', function(next) {
	    setTimeout(function(){
		    check_listener_1 = true
		    next()
	    }, 0)
    });

    emitter.on('event1', function(next) {
	    check_listener_2 = true
	    check_listener_1 && next()
    });

    emitter.emit('event1', function() {
	    test.ok(check_listener_1, 'listener 1 passed')
	    test.ok(check_listener_2, 'listener 2 passed')
	    test.done()
    });
  },

  'it should support a "before" event': function (test) {
	  test.expect(2)

    var emitter = this.emitter,
	    check_listener_1 = false,
	    check_listener_2 = false

    emitter.on('event1', function(next) {
	    setTimeout(function(){
		    if (check_listener_2)
			    check_listener_1 = true
		    next()
	    }, 0)
    });

    emitter.on('before-event1', function(next) {
	    setTimeout(function(){
		    check_listener_2 = true
		    next()
	    }, 0)
    });

    emitter.emit('event1', function() {
	    test.ok(check_listener_1, 'listener 1 passed')
	    test.ok(check_listener_2, 'listener 2 passed')
	    test.done()
    });
  },

  'it should support an "after" event': function (test) {
	  test.expect(2)

    var emitter = this.emitter,
	    check_listener_1 = false,
	    check_listener_2 = false

    emitter.on('event1', function(next) {
	    setTimeout(function(){
		    if (!check_listener_2)
			    check_listener_1 = true
		    next()
	    }, 0)
    });

    emitter.on('after-event1', function(next) {
	    setTimeout(function(){
		    check_listener_2 = true
		    next()
	    }, 0)
    });

    emitter.emit('event1', function() {
	    test.ok(check_listener_1, 'listener 1 passed')
	    test.ok(check_listener_2, 'listener 2 passed')
	    test.done()
    });
  },

  'it should pass arguments to handlers': function (test) {
	  test.expect(3)

    var emitter = this.emitter

    emitter.on('event1', function(next, ret, param1, param2) {
	    test.equal(param1, 'param1')
	    test.equal(param2.length, 2)
	    test.equal(param2[0], 'param2-1')
	    next(ret)
    });

    emitter.emit('event1', 'param1', ['param2-1', 'param2-2'], function(next, ret) {
	    test.done()
    });
  },
//
//  'it should pass arguments to handlers of a before event': function (test) {
//
//  },
//
//  'it should pass arguments to handlers of an after event': function (test) {
//
//  },

  'it should pass return argument to handlers': function (test) {
	  test.expect(2)

    var emitter = this.emitter

    emitter.on('event1', function(next, ret) {
	    test.equal(ret, null)
	    ret = 0
	    setTimeout(function(){
		    next(++ret)
	    }, 0)
    });

    emitter.on('event1', function(next, ret) {
	    test.equal(ret, 1)
	    setTimeout(function(){
		    next(++ret)
	    }, 0)
    });

    emitter.emit('event1', function(next, ret) {
	    test.done()
    });
  },

  'it should pass return argument to the event callback': function (test) {
	  test.expect(1)

    var emitter = this.emitter

    emitter.on('event1', function(next, ret) {
	    ret = 0
	    setTimeout(function(){
		    next(++ret)
	    }, 0)
    });

    emitter.on('event1', function(next, ret) {
	    setTimeout(function(){
		    next(++ret)
	    }, 0)
    });

    emitter.emit('event1', function(ret) {
	    test.equal(ret, 2)
	    test.done()
    });
  }

});

